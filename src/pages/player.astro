---
import { Icon } from "astro-icon/components";
import PlayerBadge from "../components/PlayerBadge.astro";
import SearchBar from "../components/SearchBar.astro";
import Layout from "../layouts/Layout.astro";
import { SolidDungeons, SolidGrandMasters, SolidExoticMissions, SolidRaids } from "../components/PlayerActivitiesCompletion.tsx";
---

<Layout title="Guardian Rank Report">
	<script>
		import { GetPlayerRelevantInformation } from "../stores/destinyPlayerData";

		window.addEventListener("DOMContentLoaded", async () => {
			const url = new URL(window.location.href);
			const params = new URLSearchParams(url.search);
			const bungieNetMembershipIdName = "id";
			const membershipTypeName = "type";
			const bungieNetMembershipId = params.get(bungieNetMembershipIdName);
			const membershipType = params.get(membershipTypeName);
			GetPlayerRelevantInformation(bungieNetMembershipId!, parseInt(membershipType!));
		});
	</script>
	<div class="content">
		<PlayerBadge />
		<div>
			<div
				style="color:#ffffffbf; font-family: 'Neue Haas Grotesk Text Pro','Helvetica', 'Arial', sans-serif; display: flex; flex-flow: row wrap; gap: 10px;">
				<div class="activityGroup">
					<div class="activityGroupCard hoverable">
						<SolidRaids client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidRaids>
					</div>
				</div>
				<div class="activityGroup">
					<div class="activityGroupCard hoverable">
						<SolidDungeons client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidDungeons>
					</div>
				</div>
				<div class="activityGroup">
					<div class="activityGroupCard hoverable">
						<SolidGrandMasters client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidGrandMasters>
					</div>
				</div>

				<div class="activityGroup">
					<div class="activityGroupCard hoverable">
						<SolidExoticMissions client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidExoticMissions>
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style is:global>
	.activityGroup {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		margin: 0 auto;
		min-width: 474px;
		max-width: calc(50% - 5px);
		cursor: default;
		user-select: none;
		-webkit-user-select: none;
	}
	.activityGroupCard {
		outline: 2px solid;
		outline-offset: 4px;
		outline-color: transparent;
		color: #d2d2d2;
		transition:
			outline-offset 0.08s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			outline-color 0.13s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color 0.125s cubic-bezier(0.69, 0, 0, 1),
			background-color 0.125s cubic-bezier(0.69, 0, 0, 1);
	}
	@media (hover: hover) {
		.activityGroupCard:hover {
			background: #ffffff2f;
			outline-color: #d8d8d8;
			outline-offset: 2px;
			transition:
				outline-offset calc(0 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
				outline-color calc(0 + 0.15)s linear 0.05s,
				color calc(0 + 0.05)s linear 0.15s;
				background-color calc(0 + 0)s;

		}
	}
	@media (hover: none) {
	.activityGroupCard.touch-hover {
		background: #ffffff2f;
		outline-color: #d8d8d8;
		outline-offset: 2px;
		transition:
			outline-offset calc(0.25 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
			outline-color calc(0.25 + 0.15)s linear 0.05s,
			color calc(0.25 + 0.05)s linear 0.15s,
			background-color calc(0.25 + 0)s;
	}
	}

	.destinyItem {
		outline: 2px solid;
		outline-offset: 4px;
		outline-color: transparent;
		border-style: solid;
		border-color: #b7b7b7;
		border-width: 1.5px;
		width:64px; 
		height:64px; 

		transition:
			outline-color 0.13s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color 0.125s cubic-bezier(0.69, 0, 0, 1);
	}
	@media (hover: hover) {
		.destinyItem:hover {
			outline-color: #d8d8d8;
			outline-offset: 2px;
			border-color: #ffffff;
			transition:
				outline-offset calc(0 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
				outline-color calc(0 + 0.15)s linear 0.05s,
				border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
				color calc(0 + 0.05)s linear 0.15s;

		}
	}
	@media (hover: none) {
	.destinyItem.touch-hover {
		outline-color: #d8d8d8;
			outline-offset: 2px;
			border-color: #ffffff;
		transition:
			outline-offset calc(0.25 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
			outline-color calc(0.25 + 0.15)s linear 0.05s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color calc(0.25 + 0.05)s linear 0.15s;
	}
}
</style>

<script>
	const touchDocument = (e: Event) => {
		const clicked = e.target! as Element;
		const hoverableElement = clicked.closest(".hoverable");
		if (hoverableElement == null) return;

		let className = "touch-hover";
		if (e.type == "touchend") {
			if (hoverableElement.classList) {
				hoverableElement.classList.remove(className);
			} else {
				const classes = hoverableElement.className.split(" ");
				const existingIndex = classes.indexOf(className);
				if (existingIndex >= 0) classes.splice(existingIndex, 1);
				hoverableElement.className = classes.join(" ");
			}
		} else {
			if (hoverableElement.classList) {
				hoverableElement.classList.add(className);
			} else {
				const classes = hoverableElement.className.split(" ");
				const existingIndex = classes.indexOf(className);

				if (existingIndex < 0) classes.push(className);

				hoverableElement.className = classes.join(" ");
			}
		}
	};
	document.addEventListener("touchstart", touchDocument);
	document.addEventListener("touchend", touchDocument);
</script>
