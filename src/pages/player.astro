---
import { Icon } from "astro-icon/components";
import PlayerBadge from "../components/PlayerBadge.astro";
import SearchBar from "../components/SearchBar.astro";
import Layout from "../layouts/Layout.astro";
import { SolidDungeons, SolidGrandMasters, SolidExoticMissions, SolidRaids } from "../components/PlayerActivitiesCompletion.tsx";
---

<Layout title="Guardian Rank Report">
	<script>
		import { GetPlayerRelevantInformation, CurrentPlayerProfile } from "../stores/destinyPlayerData";
		import html2canvas from "html2canvas";
		import Toastify from 'toastify-js'
		import "toastify-js/src/toastify.css"
		let playerInfoPromise: Promise<boolean>;
		window.addEventListener("DOMContentLoaded", async () => {
			const url = new URL(window.location.href);
			const params = new URLSearchParams(url.search);
			const bungieNetMembershipIdName = "id";
			const membershipTypeName = "type";
			const bungieNetMembershipId = params.get(bungieNetMembershipIdName);
			const membershipType = params.get(membershipTypeName);
			playerInfoPromise = GetPlayerRelevantInformation(bungieNetMembershipId!,parseInt(membershipType!));
		});
		const button = document.querySelector("[data-screenshot-button]")!;


		// Async/await method replacing toBlob() callback
		async function getBlobFromCanvas(canvas : HTMLCanvasElement) {
		return new Promise<Blob>((resolve, reject) => {
			canvas.toBlob((blob) => {
			if (blob) {
				resolve(blob);
			} else {
				reject(new Error("Canvas toBlob failed"));
			}
			});
		});
		}


		button.addEventListener("click", async (event) => {
			if (playerInfoPromise == undefined || button.innerHTML == "...") return;

			button.innerHTML = "...";
			await playerInfoPromise;

			const baseCanvas = await html2canvas(document.querySelector("#main-content")!, {allowTaint: true, backgroundColor: "#1a1c1d", useCORS: true, windowWidth: 1080, logging: false});
			const canvas = document.createElement("canvas");
			const canvasctx = canvas.getContext("2d")!;
			canvas.width = baseCanvas.width;
			canvas.height = baseCanvas.height;
			canvasctx.drawImage(baseCanvas, 0, 0);
			canvasctx.globalAlpha = 0.5;
			canvasctx.drawImage((document.getElementById("logo") as HTMLImageElement)!, 3, canvas.height - 64);

			//const image = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
			// Copy canvas to blob
			try {
				const blob = await getBlobFromCanvas(canvas);
				// Write the data to the clipboard
				await navigator.share({ [blob.type]: blob });
				Toastify({
				text: "Copied to Clipboard!",
				duration: 3000,
				close: false,
				gravity: "bottom", // `top` or `bottom`
				position: "center",
				stopOnFocus: true, // Prevents dismissing of toast on hover
				style: {
					color: '#FFFFFF',
					background: "#0F0F0F",
					"border-radius": "40px"
				},
			}).showToast();
			} catch (error) {
				Toastify({
				text: JSON.stringify((error as Error).message),
				duration: 3000,
				close: false,
				gravity: "bottom", // `top` or `bottom`
				position: "center",
				stopOnFocus: true, // Prevents dismissing of toast on hover
				style: {
					color: '#FFFFFF',
					background: "#0F0F0F",
					"border-radius": "40px"
				},
			}).showToast();
			}
			button.innerHTML = "Share";
		}
		);

	</script>
	<div class="content">
		<button style="margin-left: auto;" data-screenshot-button>Share</button>
	</div>
	<div class="content" id="main-content">
		<PlayerBadge />
			<div
				style="color:#ffffffbf; font-family: 'Neue Haas Grotesk Text Pro','Helvetica', 'Arial', sans-serif; display: flex; flex-flow: row wrap; gap: 10px;">
				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidRaids client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidRaids>
					</div>
				</div>
				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidDungeons client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidDungeons>
					</div>
				</div>
				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidGrandMasters client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidGrandMasters>
					</div>
				</div>

				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidExoticMissions client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidExoticMissions>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
</Layout>

<style is:global>
	.activityGroup {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		margin: 0 auto;
		min-width: 474px;
		max-width: calc(50% - 5px);
		cursor: default;
		user-select: none;
		-webkit-user-select: none;
	}
	.activityGroupCard {
		outline: 2px solid;
		outline-offset: 4px;
		outline-color: transparent;
		color: #d2d2d2;
		transition:
			outline-offset 0.08s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			outline-color 0.13s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color 0.125s cubic-bezier(0.69, 0, 0, 1),
			background-color 0.125s cubic-bezier(0.69, 0, 0, 1);
	}
	@media (hover: hover) {
		.activityGroupCard.hoverable:hover {
			background: #ffffff2f;
			outline-color: #d8d8d8;
			outline-offset: 2px;
			transition:
				outline-offset calc(0 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
				outline-color calc(0 + 0.15)s linear 0.05s,
				color calc(0 + 0.05)s linear 0.15s;
				background-color calc(0 + 0)s;

		}
	}
	@media (hover: none) {
	.activityGroupCard.hoverable.touch-hover {
		background: #ffffff2f;
		outline-color: #d8d8d8;
		outline-offset: 2px;
		transition:
			outline-offset calc(0.25 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
			outline-color calc(0.25 + 0.15)s linear 0.05s,
			color calc(0.25 + 0.05)s linear 0.15s,
			background-color calc(0.25 + 0)s;
	}
	}

	.destinyItem {
		outline: 2px solid;
		outline-offset: 4px;
		outline-color: transparent;
		border-style: solid;
		border-color: #b7b7b7;
		border-width: 1.5px;
		width:64px; 
		height:64px; 

		transition:
			outline-offset 0.08s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			outline-color 0.13s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color 0.125s cubic-bezier(0.69, 0, 0, 1),
			background-color 0.125s cubic-bezier(0.69, 0, 0, 1);
	}
	
	@media (hover: hover) {
		.destinyItem.hoverable:hover {
			outline-color: #d8d8d8;
			outline-offset: 2px;
			border-color: #ffffff;
			transition:
				outline-offset calc(0 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
				outline-color calc(0 + 0.15)s linear 0.05s,
				border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
				color calc(0 + 0.05)s linear 0.15s;

		}
	}
	@media (hover: none) {
	.destinyItem.hoverable.touch-hover {
		outline-color: #d8d8d8;
			outline-offset: 2px;
			border-color: #ffffff;
		transition:
			outline-offset calc(0.25 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
			outline-color calc(0.25 + 0.15)s linear 0.05s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color calc(0.25 + 0.05)s linear 0.15s;
	}
}
</style>

<script>
	const touchDocument = (e: Event) => {
		const clicked = e.target! as Element;
		const hoverableElement = clicked.closest(".hoverable");
		if (hoverableElement == null) return;

		let className = "touch-hover";
		if (e.type == "touchend") {
			if (hoverableElement.classList) {
				hoverableElement.classList.remove(className);
			} else {
				const classes = hoverableElement.className.split(" ");
				const existingIndex = classes.indexOf(className);
				if (existingIndex >= 0) classes.splice(existingIndex, 1);
				hoverableElement.className = classes.join(" ");
			}
		} else {
			if (hoverableElement.classList) {
				hoverableElement.classList.add(className);
			} else {
				const classes = hoverableElement.className.split(" ");
				const existingIndex = classes.indexOf(className);

				if (existingIndex < 0) classes.push(className);

				hoverableElement.className = classes.join(" ");
			}
		}
	};
	document.addEventListener("touchstart", touchDocument);
	document.addEventListener("touchend", touchDocument);
</script>