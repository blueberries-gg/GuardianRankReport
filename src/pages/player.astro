---
import { Icon } from "astro-icon/components";
import PlayerBadge from "../components/PlayerBadge.astro";
import PlayerRankHelp from "../components/PlayerRankHelp.astro";
import SearchBar from "../components/SearchBar.astro";
import Layout from "../layouts/Layout.astro";
import { SolidDungeons, SolidGrandMasters, SolidExoticMissions, SolidRaids } from "../components/PlayerActivitiesCompletion.tsx";
---

<Layout title="Guardian Rank Report">
	<script>
		import { GetPlayerRelevantInformation, CurrentPlayerProfile } from "../stores/destinyPlayerData";
		import html2canvas from "html2canvas";
		import Toastify from 'toastify-js'
		import "toastify-js/src/toastify.css"
		let playerInfoPromise: Promise<boolean>;
		window.addEventListener("DOMContentLoaded", async () => {
			const url = new URL(window.location.href);
			const params = new URLSearchParams(url.search);
			const bungieNetMembershipIdName = "id";
			const membershipTypeName = "type";
			const bungieNetMembershipId = params.get(bungieNetMembershipIdName);
			const membershipType = params.get(membershipTypeName);
			playerInfoPromise = GetPlayerRelevantInformation(bungieNetMembershipId!,parseInt(membershipType!));
		});
		const button = document.querySelector("[data-screenshot-button]")!;


		// Async/await method replacing toBlob() callback
		async function getBlobFromCanvas(canvas : HTMLCanvasElement) {
		return new Promise<Blob>((resolve, reject) => {
			canvas.toBlob((blob) => {
			if (blob) {
				resolve(blob);
			} else {
				reject(new Error("Canvas toBlob failed"));
			}
			});
		});
		}

		button.addEventListener("click", async (event) => {
			if (playerInfoPromise == undefined) return;

			if (!CurrentPlayerProfile.get().complete){
				Toastify({
					text: "Retry in a bit, while we get all the information",
					duration: 3000,
					close: false,
					gravity: "bottom",
					position: "center",
					style: {
						color: '#FFFFFF',
						background: "#0F0F0F",
						"border-radius": "40px"
					},
				}).showToast();
				return;
			}

			Toastify({
				text: "Generating image, screen may strech",
				duration: 3000,
				close: false,
				gravity: "bottom",
				position: "center",
				style: {
					color: '#FFFFFF',
					background: "#0F0F0F",
					"border-radius": "40px"
				},
			}).showToast();

			if (!navigator.canShare) {
				await playerInfoPromise;
			}

			let cards = document.getElementsByClassName("activityGroupCard");
			for (let card of cards) {
				(card as HTMLElement).style.minWidth = "535px"
			}

			let htmlCanvas = document.getElementById("shareCanvas") as HTMLCanvasElement;
			const baseCanvas = await html2canvas(document.querySelector("#main-content")!, {allowTaint: true, backgroundColor: "#1a1c1d", useCORS: true, windowWidth: 1080, width:1080, logging: false, scale: 0.9, x: 0, y:0, scrollX: 0, scrollY: 0});
			for (let card of cards) {
				(card as HTMLElement).style.minWidth = ""
			}
			const canvas = document.createElement("canvas");
			const canvasctx = canvas.getContext("2d")!;
			canvas.width = baseCanvas.width;
			canvas.height = baseCanvas.height;
			canvasctx.drawImage(baseCanvas, 0, 0);
			canvasctx.globalAlpha = 0.5;
			canvasctx.drawImage((document.getElementById("logo") as HTMLImageElement)!, 3, canvas.height - 64);

			try {
				const fileName = `${CurrentPlayerProfile.get().info.UserCard.bungieGlobalDisplayName}#${("000" + CurrentPlayerProfile.get().info.UserCard.bungieGlobalDisplayNameCode).slice(-4)}.png`;
				const blob = await getBlobFromCanvas(canvas);
				// Write the data to the clipboard
				const data = {
					files: [
					new File([blob], fileName, {
						type: blob.type,
					}),
					]
				};
				if (/Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent) && navigator.canShare && navigator.canShare(data)) {
					await navigator.share(data);
				}
				else {
					const data = [new ClipboardItem({ [blob.type]: blob })];
					try {
					// Write the data to the clipboard
					await navigator.clipboard.write(data);
					Toastify({
						text: "Copied to Clipboard!",
						duration: 3000,
						close: false,
						gravity: "bottom",
						position: "center",
						style: {
							color: '#FFFFFF',
							background: "#0F0F0F",
							"border-radius": "40px"
						},
					}).showToast();
					}
					catch {
						const image = canvas.toDataURL("image/png");//.replace("image/png", "image/octet-stream");
						const imageDownloadElement = document.createElement("a");
						//const UserInfo = CurrentPlayerProfile.get().info.UserCard;
						//imageDownloadElement.setAttribute("download", fileName);
						imageDownloadElement.setAttribute("href", image);
						imageDownloadElement.setAttribute("target", "_blank");
						imageDownloadElement.click();
					}
				}
			} catch (error) {
				Toastify({
				text: JSON.stringify((error as Error).message),
				duration: 3000,
				close: false,
				gravity: "bottom",
				position: "center",
				style: {
					color: '#FFFFFF',
					background: "#0F0F0F",
					"border-radius": "40px"
				},
			}).showToast();
			}
		}
		);

	</script>
	<div class="buttonShareContainer" data-html2canvas-ignore>
		<button style="margin-left: auto;" data-screenshot-button class="btn-share">
			<span class="btn-text">Share</span
			>
			  <svg
				height="18"
				width="18"
				viewBox="0 0 458.624 458.624"
				class="btn-icon"
				xmlns="http://www.w3.org/2000/svg"
			  >
			  <path d="M339.588,314.529c-14.215,0-27.456,4.133-38.621,11.239l-112.682-78.67c1.809-6.315,2.798-12.976,2.798-19.871
			  c0-6.896-0.989-13.557-2.798-19.871l109.64-76.547c11.764,8.356,26.133,13.286,41.662,13.286c39.79,0,72.047-32.257,72.047-72.047
			  C411.634,32.258,379.378,0,339.588,0c-39.79,0-72.047,32.257-72.047,72.047c0,5.255,0.578,10.373,1.646,15.308l-112.424,78.491
			  c-10.974-6.759-23.892-10.666-37.727-10.666c-39.79,0-72.047,32.257-72.047,72.047s32.256,72.047,72.047,72.047
			  c13.834,0,26.753-3.907,37.727-10.666l113.292,79.097c-1.629,6.017-2.514,12.34-2.514,18.872c0,39.79,32.257,72.047,72.047,72.047
			  c39.79,0,72.047-32.257,72.047-72.047C411.635,346.787,379.378,314.529,339.588,314.529z" fill="#fff"/>
			  </svg>
			</button>
	</div>
	<div class="content" id="main-content">
		<div style="display: flex; flex-wrap: wrap;">
			<PlayerBadge />
			<PlayerRankHelp />
		</div>

			<div
				style="color:#ffffffbf; font-family: 'Neue Haas Grotesk Text Pro','Helvetica', 'Arial', sans-serif; display: flex; flex-flow: row wrap; gap: 10px;">
				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidRaids client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidRaids>
					</div>
				</div>
				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidDungeons client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidDungeons>
					</div>
				</div>
				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidGrandMasters client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidGrandMasters>
					</div>
				</div>

				<div class="activityGroup">
					<div class="activityGroupCard">
						<SolidExoticMissions client:load>
							<Icon slot="loading" name="spinner" style="height: auto;width: auto; margin:auto 5px; color: white; opacity:50%;" is:inline />
						</SolidExoticMissions>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<canvas style="display: none;" id="shareCanvas">

</canvas>
</Layout>

<script src="../scripts/playerBadge.ts"></script>

<style is:global>
	astro-island {
		display: block !important;
		margin-inline: auto;
		width: 100%;
		unicode-bidi: isolate;
	}

	.buttonShareContainer {
		bottom: 10px;
		position: fixed;
		bottom: 10;
		left: 50%;
		transform: translateX(-50%);
		z-index: 1000;
	} 

	.btn-share {
		--btn-color: #275efe;
		margin-right: 5px;
		padding: 16px 32px;
		font-weight: 500;
		font-size: 16px;
		line-height: 1;
		color: white;
		background: none;
		border: none;
		outline: none;
		cursor: pointer;
			background: var(--btn-color);
			border-radius: 24px;

		.btn-text, .btn-icon {
			display: inline-flex;
			vertical-align: middle;
		}
		.btn-icon {
			margin-left: 8px;
		}
	}

	.activityGroup {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		margin: 0 auto;
		min-width: 474px;
		max-width: calc(50% - 5px);
		cursor: default;
		user-select: none;
		-webkit-user-select: none;
	}
	.activityGroupCard {
		outline: 2px solid;
		outline-offset: 4px;
		outline-color: transparent;
		color: #d2d2d2;
		transition:
			outline-offset 0.08s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			outline-color 0.13s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color 0.125s cubic-bezier(0.69, 0, 0, 1),
			background-color 0.125s cubic-bezier(0.69, 0, 0, 1);
	}
	@media (hover: hover) {
		.activityGroupCard.hoverable:hover {
			background: #ffffff2f;
			outline-color: #d8d8d8;
			outline-offset: 2px;
			transition:
				outline-offset calc(0 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
				outline-color calc(0 + 0.15)s linear 0.05s,
				color calc(0 + 0.05)s linear 0.15s;
				background-color calc(0 + 0)s;

		}
	}
	@media (hover: none) {
	.activityGroupCard.hoverable.touch-hover {
		background: #ffffff2f;
		outline-color: #d8d8d8;
		outline-offset: 2px;
		transition:
			outline-offset calc(0.25 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
			outline-color calc(0.25 + 0.15)s linear 0.05s,
			color calc(0.25 + 0.05)s linear 0.15s,
			background-color calc(0.25 + 0)s;
	}
	}

	.destinyItem {
		outline: 2px solid;
		outline-offset: 4px;
		outline-color: transparent;
		border-style: solid;
		border-color: #b7b7b7;
		border-width: 1.5px;
		width:64px; 
		height:64px; 

		transition:
			outline-offset 0.08s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			outline-color 0.13s cubic-bezier(0.69, 0, 0, 1) 0.125s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color 0.125s cubic-bezier(0.69, 0, 0, 1),
			background-color 0.125s cubic-bezier(0.69, 0, 0, 1);
	}
	
	@media (hover: hover) {
		.destinyItem.hoverable:hover {
			outline-color: #d8d8d8;
			outline-offset: 2px;
			border-color: #ffffff;
			transition:
				outline-offset calc(0 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
				outline-color calc(0 + 0.15)s linear 0.05s,
				border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
				color calc(0 + 0.05)s linear 0.15s;

		}
	}
	@media (hover: none) {
	.destinyItem.hoverable.touch-hover {
		outline-color: #d8d8d8;
			outline-offset: 2px;
			border-color: #ffffff;
		transition:
			outline-offset calc(0.25 + 0.05)s cubic-bezier(0.69, 0, 0, 1) 0.05s,
			outline-color calc(0.25 + 0.15)s linear 0.05s,
			border-color 0.125s cubic-bezier(0.69, 0, 0, 1),
			color calc(0.25 + 0.05)s linear 0.15s;
	}
}
</style>

<script>
	const touchDocument = (e: Event) => {
		const clicked = e.target! as Element;
		const hoverableElement = clicked.closest(".hoverable");
		if (hoverableElement == null) return;

		let className = "touch-hover";
		if (e.type == "touchend") {
			if (hoverableElement.classList) {
				hoverableElement.classList.remove(className);
			} else {
				const classes = hoverableElement.className.split(" ");
				const existingIndex = classes.indexOf(className);
				if (existingIndex >= 0) classes.splice(existingIndex, 1);
				hoverableElement.className = classes.join(" ");
			}
		} else {
			if (hoverableElement.classList) {
				hoverableElement.classList.add(className);
			} else {
				const classes = hoverableElement.className.split(" ");
				const existingIndex = classes.indexOf(className);

				if (existingIndex < 0) classes.push(className);

				hoverableElement.className = classes.join(" ");
			}
		}
	};
	document.addEventListener("touchstart", touchDocument);
	document.addEventListener("touchend", touchDocument);
</script>